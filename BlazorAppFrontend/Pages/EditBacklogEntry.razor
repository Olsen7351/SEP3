@page "/edit-backlog-entry/{ProjectIdAsString}/{BacklogEntryId}"
@using Microsoft.AspNetCore.WebUtilities
@using BlazorAppTEST.Services.Interface
@using ClassLibrary_SEP3
@using ClassLibrary_SEP3.DataTransferObjects
@using Task = System.Threading.Tasks.Task
@inject IBacklogService BacklogService
@inject NavigationManager NavigationManager

<h3>Edit Backlog Entry</h3>

@if (backlogEntry != null)
{
    <EditForm Model="@backlogEntry" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="requirementNr">Requirement Number:</label>
            <InputText id="requirementNr" @bind-Value="@backlogEntry.RequirmentNr" class="form-control"/>
        </div>

        <div class="form-group">
            <label for="estimateTime">Estimate Time:</label>
            <InputText id="estimateTime" @bind-Value="@backlogEntry.EstimateTime" class="form-control"/>
        </div>

        <div class="form-group">
            <label for="actualTime">Actual Time:</label>
            <InputText id="actualTime" @bind-Value="@backlogEntry.ActualTime" class="form-control"/>
        </div>

        <div class="form-group">
            <label for="status">Status:</label>
            <InputSelect id="status" @bind-Value="@backlogEntry.Status" class="form-control">
                <option value="">Select Status</option>
                <option value="@BacklogEntryStatus.InComplete">Incomplete</option>
                <option value="@BacklogEntryStatus.InProgress">In Progress</option>
                <option value="@BacklogEntryStatus.Finished">Finished</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="sprint">Sprint:</label>
            <InputText id="sprint" @bind-Value="@backlogEntry.Sprint" class="form-control"/>
        </div>

        <button type="submit" class="btn btn-success">Update Entry</button>
    </EditForm>
}
else
{
    <p>Loading...</p>
}


@code {
    [Parameter]
    public string ProjectIdAsString { get; set; }
    [Parameter]
    public string BacklogEntryId { get; set; }
    
    private BacklogEntries backlogEntry;


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(ProjectIdAsString) && !string.IsNullOrEmpty(BacklogEntryId))
        {
            backlogEntry = await BacklogService.GetBacklogEntryById(ProjectIdAsString, BacklogEntryId);
        }
    }

    private async Task HandleValidSubmit()
    {
        var updateRequest = new UpdateBacklogEntryRequest
        {
            EntryID = BacklogEntryId, // The ID of the entry you are updating
            ProjectID = ProjectIdAsString, // The ID of the project to which the backlog entry belongs
            RequirmentNr = backlogEntry.RequirmentNr,
            EstimateTime = backlogEntry.EstimateTime,
            ActualTime = backlogEntry.ActualTime,
            Status = backlogEntry.Status,
            Sprint = backlogEntry.Sprint
        };

        try
        {
            if (String.IsNullOrEmpty(updateRequest.EntryID))
            {
                throw new Exception("EntryID is null or empty Front-End");
            }
            if (String.IsNullOrEmpty(updateRequest.ProjectID))
            {
                throw new Exception("ProjectID is null or empty Front-End");
            }
            
            await BacklogService.UpdateBacklogEntry(updateRequest);
            NavigationManager.NavigateTo($"/project-hub/{ProjectIdAsString}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to update backlog entry: {ex.Message}");
        }
    }
}