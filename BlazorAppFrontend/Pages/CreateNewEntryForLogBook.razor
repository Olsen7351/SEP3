@page "/create-new-entry-for-logbook/{ProjectIdAsString}"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject ILogBookService LogBookService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BlazorAppTEST.Services
@using ClassLibrary_SEP3
@using ClassLibrary_SEP3.DataTransferObjects
@using Task = System.Threading.Tasks.Task
@inject NavigationManager NavigationManager

<h3>Create New Entry for Logbook</h3>

<EditForm Model="@logBookEntryPayload" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    
    <div class="form-group">
        <label for="Description">Description:</label>
        <InputTextArea id="Description" class="form-control" @bind-Value="logBookEntryPayload.Description" />
    </div>
    <button type="submit" class="btn btn-success" disabled="@string.IsNullOrEmpty(username)">Create Entry</button>
</EditForm>



@code {
    
    [Parameter]
    public string ProjectIdAsString { get; set; }
    private LogBookEntryPoints logBookEntryPayload = new LogBookEntryPoints();
    private String username;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Claims.FirstOrDefault(c => c.Type == "sub")?.Value;
        }
    }
    
    
    private async Task HandleValidSubmit()
    {
        AddEntryPointRequest logBookEntry = new AddEntryPointRequest()
        {
            ProjectID = ProjectIdAsString,
            OwnerUsername = username,
            Description = logBookEntryPayload.Description,
            CreatedTimeStamp = DateTime.Now
        };

        await LogBookService.CreateNewEntryToLogBook(logBookEntry);
        NavigationManager.NavigateTo($"/project-hub/{ProjectIdAsString}");
    }
}