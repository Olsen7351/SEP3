@page "/project-hub/{ProjectIdAsString}/createSprint"
@inject ISprintBacklogService SprintService
@using Task = System.Threading.Tasks.Task
@using BlazorAppTEST.Services.Interface

@attribute [Authorize]

@using ClassLibrary_SEP3.DataTransferObjects



<div class="container">
    <div class="card">
        <!-- Sprint Creation Form -->
        <h3>Sprint Creation</h3>
        <EditForm Model="newSprint" OnValidSubmit="CreateSprintBacklog">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Project Id:</label>
                <InputText id="name" class="form-control" @bind-Value="newSprint.projectId"/>
                <ValidationMessage For="@(() => newSprint.projectId)" />
            </div>

            <div class="form-group">
                <label for="description">Title:</label>
                <InputTextArea id="description" class="form-control" @bind-Value="newSprint.Title"></InputTextArea>
            </div>

            <div class="form-group">
                <label for="startDate">Date:</label>
                <InputDate id="startDate" class="form-control" @bind-Value="newSprint.Timestamp"></InputDate>
                <ValidationMessage For="@(() => newSprint.Timestamp)" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>
@if (createdSprint != null)
{
    <div class="container">
        <div class="card">
            <h3 style="color: lime;">Created Sprint Successfully!</h3>
            <p><strong>Project Id:</strong> @createdSprint.projectId</p>
            <p><strong>Title :</strong> @createdSprint.Title</p>
            <p><strong>Date:</strong> @createdSprint.Timestamp</p>
            
        </div>
    </div>
}
@code
{
    [Parameter]
    public string ProjectIdAsString { get; set; }
    
    private CreateSprintBackLogRequest newSprint = new();
    private CreateSprintBackLogRequest createdSprint;
    private EditContext editContext;
    
    protected override void OnInitialized()
    {
        Console.WriteLine($"Received Project ID: {ProjectIdAsString}");
        newSprint = new CreateSprintBackLogRequest()
        {
            projectId = ProjectIdAsString,
            Timestamp = DateTime.Today
        };
        editContext = new EditContext(newSprint);
    }

    private async Task CreateSprintBacklog()
    {
        Console.WriteLine("CreateSprintBacklog method called");
        if (!editContext.Validate())
        {
            return;
        }
        createdSprint = newSprint;
        var response = await SprintService.CreateSprintBacklogAsync(newSprint);
        Console.WriteLine($"Response Status: {response.ToString()}");
        newSprint = new CreateSprintBackLogRequest();
        editContext = new EditContext(newSprint);
    }
}
