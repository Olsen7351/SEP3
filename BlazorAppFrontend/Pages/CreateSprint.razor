@page "/project-hub/{ProjectIdAsString}/createSprint"
@inject ISprintBacklogService SprintService
@using Task = System.Threading.Tasks.Task
@using BlazorAppTEST.Services.Interface
@using ClassLibrary_SEP3
@inject NavigationManager NavigationManager

@attribute [Authorize]

@using ClassLibrary_SEP3.DataTransferObjects
@using Microsoft.AspNetCore.Mvc



<div class="container">
    <div class="card">
        <!-- Sprint Creation Form -->
        <h3>Sprint Creation</h3>
        <EditForm Model="newSprint" OnValidSubmit="CreateSprintBacklog">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Project Id:</label>
                <InputText id="name" class="form-control" @bind-Value="newSprint.projectId"/>
                <ValidationMessage For="@(() => newSprint.projectId)" />
            </div>

            <div class="form-group">
                <label for="description">Title:</label>
                <InputTextArea id="description" class="form-control" @bind-Value="newSprint.Title"></InputTextArea>
            </div>

            <div class="form-group">
                <label for="startDate">Date:</label>
                <InputDate id="startDate" class="form-control" @bind-Value="newSprint.Timestamp"></InputDate>
                <ValidationMessage For="@(() => newSprint.Timestamp)" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>
@if (createdSprint != null)
{
    <div class="container">
        <div class="card">
            <h3 style="color: lime;">Created Sprint Successfully!</h3>
            <p><strong>Project Id:</strong> @createdSprint.projectId</p>
            <p><strong>Title :</strong> @createdSprint.Title</p>
            <p><strong>Date:</strong> @createdSprint.Timestamp</p>
            
        </div>
    </div>
}
<!-- Sprint section -->
<div class="container">
    <div class="card">
        <p>Sprint Backlog Entries</p>
        @if (!SprintBacklogs.Any())
        {
            <div>@EmptyHelper</div>
        }
        else
        {
            @foreach (var backlog in SprintBacklogs)
            {
                <div class="card sprint-backlog">
                    <p>Title: @backlog.Title</p>
                    <p>Created At: @backlog.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</p>
                    <div>
                        <h4>Tasks</h4>
                        @if (backlog.Tasks.Any())
                        {
                            <ul>
                                @foreach (var task in backlog.Tasks)
                                {
                                    <li>
                                        <strong>@task.Title</strong>
                                        @if (!string.IsNullOrEmpty(task.Description))
                                        {
                                            <div>Description: @task.Description</div>
                                        }
                                        <div>Status: @task.Status.ToString()</div>
                                        <div>Created At: @task.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</div>
                                        <div>Estimated Time: @task.EstimateTimeInMinutes min</div>
                                        <div>Actual Time Used: @task.ActualTimeUsedInMinutes min</div>
                                        <div>Responsible: @task.Responsible</div>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>No tasks available</p>
                        }
                    </div>
                    <button class="btn btn-secondary mt-2" 
                                    @onclick="@(() => NavigateToAddTaskPage(backlog.SprintBacklogId))">
                                Add Task
                            </button>
                </div>
            }
        }
    </div>

    @if (LoadSprintBacklogsError != null)
    {
        <div class="alert alert-danger">
            Error loading sprint backlogs: @LoadSprintBacklogsError
        </div>
    }
</div>
@code
{
    [Parameter]
    public string ProjectIdAsString { get; set; }
    [Parameter]
    public string SprintIdAsString { get; set; }
    
    private CreateSprintBackLogRequest newSprint = new();
    private CreateSprintBackLogRequest createdSprint;
    private EditContext editContext;

    private List<SprintBacklog> SprintBacklogs = new List<SprintBacklog>();
    public string EmptyHelper { get; set; }
    private string LoadSprintBacklogsError;
    
    protected async override Task OnInitializedAsync()
    {
        Console.WriteLine($"Received Project ID: {ProjectIdAsString}");
        newSprint = new CreateSprintBackLogRequest()
        {
            projectId = ProjectIdAsString,
            Timestamp = DateTime.Today
        };
        editContext = new EditContext(newSprint);
        await LoadSprintBacklogs();
    }

    private async Task CreateSprintBacklog()
    {
        Console.WriteLine("CreateSprintBacklog method called");
        if (!editContext.Validate())
        {
            return;
        }
        createdSprint = newSprint;
        var response = await SprintService.CreateSprintBacklogAsync(newSprint);
        Console.WriteLine($"Response Status: {response.ToString()}");
        newSprint = new CreateSprintBackLogRequest();
        editContext = new EditContext(newSprint);
        await LoadSprintBacklogs();
    }

    private async Task LoadSprintBacklogs()
    {
        var response = await SprintService.GetSprintBacklogsAsync(ProjectIdAsString);

        if (response is OkObjectResult result && result.Value is List<SprintBacklog> backlogs)
        {
            SprintBacklogs = backlogs.ToList();
            LoadSprintBacklogsError = null; // Clear any previous error
        }
        else if (response is NotFoundResult)
        {
            LoadSprintBacklogsError = "Project ID not found.";
        }
        else
        {
            LoadSprintBacklogsError = "Failed to load sprint backlogs.";
            Console.WriteLine($"Error response type: {response.GetType()}");
        }
    }

    private void NavigateToAddTaskPage(string sprintId)
    {
        NavigationManager.NavigateTo($"/project-hub/{ProjectIdAsString}/{sprintId}/create-task");
    }
    
}
