@page "/{ProjectIdAsString}/CreateBacklogEntry"
@using ClassLibrary_SEP3
@using ClassLibrary_SEP3.DataTransferObjects
@using BlazorAppTEST.Services.Interface
@using Task = System.Threading.Tasks.Task
@inject NavigationManager NavigationManager
@inject IBacklogService BacklogService 

<h3>Create Backlog Entry</h3>

<EditForm Model="@backlogEntryPayload" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="requirementNr">Requirement Number:</label>
        <InputText id="requirementNr" @bind-Value="backlogEntryPayload.RequirmentNr" class="form-control"/>
    </div>

    <div class="form-group">
        <label for="estimateTime">Estimate Time:</label>
        <InputText id="estimateTime" @bind-Value="backlogEntryPayload.EstimateTime" class="form-control"/>
    </div>

    <div class="form-group">
        <label for="actualTime">Actual Time:</label>
        <InputText id="actualTime" @bind-Value="backlogEntryPayload.ActualTime" class="form-control"/>
    </div>
    

    <div class="form-group">
        <label for="status">Status:</label>
        <InputSelect id="status" @bind-Value="backlogEntryPayload.Status" class="form-control">
            <option value="">Select Status</option>
            <option value="@BacklogEntryStatus.InComplete">Incomplete</option>
            <option value="@BacklogEntryStatus.InProgress">In Progress</option>
            <option value="@BacklogEntryStatus.Finished">Finished</option>
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="sprint">Sprint:</label>
        <InputText id="sprint" @bind-Value="backlogEntryPayload.Sprint" class="form-control"/>
    </div>

    <button type="submit" class="btn btn-success">Create Backlog Entry</button>
</EditForm>

@code {
    
    [Parameter]
    public string ProjectIdAsString { get; set; }
    private AddBacklogEntryRequest backlogEntryPayload = new AddBacklogEntryRequest();


    private async Task HandleValidSubmit()
    {
        AddBacklogEntryRequest backlogEntry = new AddBacklogEntryRequest()
        {
            ProjectID = ProjectIdAsString,
            RequirmentNr = backlogEntryPayload.RequirmentNr,
            EstimateTime = backlogEntryPayload.EstimateTime,
            ActualTime = backlogEntryPayload.ActualTime,
            Status = backlogEntryPayload.Status,
            Sprint = backlogEntryPayload.Sprint
        };

        if (String.IsNullOrEmpty(backlogEntry.ProjectID))
        {
            throw new Exception("ProjectID is null Front-End");
        }

        await BacklogService.CreateBacklogEntry(backlogEntry);
        NavigationManager.NavigateTo($"project-hub/{ProjectIdAsString}");
    }
}
