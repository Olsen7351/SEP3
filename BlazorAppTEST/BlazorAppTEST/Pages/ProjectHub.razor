@page "/project-hub/{ProjectIdAsString}"
@using ClassLibrary_SEP3
@using BlazorAppTEST.Services
@using MongoDB.Bson
@using ProjectMicroservice.DataTransferObjects
@using ProjectMicroservice.Models
@using Xunit.Sdk
@using Task = System.Threading.Tasks.Task
@using TaskStatus = ClassLibrary_SEP3.TaskStatus
@inject ProjectService ProjectService
@inject TaskService TaskService;

@inject NavigationManager NavManager

<div class="container-fluid">
    <div class="container">
        <h2>Project Hub for Project ID: @ProjectIdAsString</h2>
        <div class="card backlog-section">
                <p>Backlog</p>
            <ul class="task-list">
                    @foreach (var task in BacklogTasks!)
                    {
                        <li class="task-item">
                            <span>@task</span>
                            <button class="btn-delete-task" @onclick="() => DeleteTask(task.Id.ToString())">x</button>
                        </li>
                    }
            </ul>
            <div class="create-task-form">
                <h3>Create a New Task</h3>
                <div class="form-group">
                    <label for="title">Title:</label>
                    <input type="text" id="title" @bind="newTask.Title" />
                </div>
                <div class="form-group">
                    <label for="description">Description:</label>
                    <textarea id="description" @bind="newTask.Description"></textarea>
                </div>
                <div class="form-group">
                    <label for="estimateTime">Estimate Time:</label>
                    <input type="datetime-local" id="estimateTime" @bind="newTask.EstimateTime" />
                </div>
                <div class="form-group">
                    <label for="responsible">Responsible:</label>
                    <input type="text" id="responsible" @bind="newTask.Responsible" />
                </div>
                <button class="button" @onclick="AddTask">Save Task</button>
            </div>
                
        </div>
    </div>
</div>


@code
{
    [Parameter]
    public string ProjectIdAsString { get; set; }

    public Project Project { get; set; }

    public List<ClassLibrary_SEP3.Task?>? BacklogTasks { get; set; } = new List<ClassLibrary_SEP3.Task?>();
    private AddBacklogTaskRequest newTask = new AddBacklogTaskRequest();




    protected override async Task OnParametersSetAsync()
    {
        Project = await ProjectService.GetProject(ProjectIdAsString);
        BacklogTasks = Project.Backlog.BacklogTasks;

    }



    private async void AddTask()
    {
        var task = new AddBacklogTaskRequest()
        {
            ProjectId = ProjectIdAsString,
            Title = newTask.Title,
            Description = newTask.Description,
            EstimateTime = newTask.EstimateTime,
            Responsible = newTask.Responsible,
            Status = TaskStatus.ToDo,
            CreatedAt = DateTime.UtcNow
        };

        var response = await TaskService.CreateTask(task);
        BacklogTasks.Add(response);
    }


    //DeleteTask
    private async Task DeleteTask(string id)
    {
        try
        {
            await TaskService.DeleteTask(id, ProjectIdAsString);
        }
        catch (Exception ex)
        {
            throw new NullReferenceException("Failed to delete Task");
        }
        
    }
}