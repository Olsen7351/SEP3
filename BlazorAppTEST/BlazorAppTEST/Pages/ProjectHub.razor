@page "/project-hub/{ProjectIdAsString}"
@using ClassLibrary_SEP3
@using BlazorAppTEST.Services
@using MongoDB.Bson
@using ProjectMicroservice.Models
@using Task = System.Threading.Tasks.Task
@inject BacklogService BacklogService
@inject ProjectService ProjectService
@inject NavigationManager NavManager

<div class="container-fluid">
    <div class="container">
        <h2>Project Hub for Project ID: @ProjectId</h2>
        <div class="card backlog-section">
            @if (HasBacklog)
            {
                <p>Backlog</p>
                <ul class="task-list">
                    @foreach (var task in backlogs)
                    {
                        <li class="task-item">
                            <span>@task.TaskName</span>
                            <button class="btn-delete-task" @onclick="() => DeleteTask(task.TaskID)">x</button>
                        </li>
                    }
                </ul>

                <button class="button" @onclick="AddTask">Add Task</button>
            }
            else
            {
                <button class="button" @onclick="CreateBacklog">Create Backlog</button>
            }
            
        </div>
    </div>
</div>


@code
{
    [Parameter]
    public string ProjectIdAsString { get; set; }

    public ObjectId ProjectId { get; private set; }
    bool HasBacklog = false;

    

    protected override async void OnParametersSet()
    {
    // Check if the project has a backlog
        var backlogId = await ProjectService.GetBacklogIDForProject(ProjectId.ToString());
        HasBacklog = !string.IsNullOrEmpty(backlogId);
    }


    //Redirect to another page
    private void AddTask()
    {
        NavManager.NavigateTo("/BacklogCreateTask");
    }


    //Create backlog
    private async Task CreateBacklog()
    {
        var backlog = new Backlog()
        {
            ProjectId = ProjectId
        };
    //Create Backlog 
        await BacklogService.CreateBacklog(backlog);
    }


    //DeleteTask
    private async Task DeleteTask()
    {
    }


    //------------------------------------------------
    
    // Mock data structure
    public class BacklogTask
    {
        public int TaskID { get; set; }
        public string TaskName { get; set; }
    }

    // Dummy data for demo purposes
    private List<BacklogTask> backlogs = new List<BacklogTask>
    {
        new BacklogTask { TaskID = 1, TaskName = "task1" },
        new BacklogTask { TaskID = 2, TaskName = "task2" }
    // ... Other tasks
    };

    // Delete task method
    private async Task DeleteTask(int taskId)
    {
    // Logic to delete task from the backend
        backlogs.RemoveAll(t => t.TaskID == taskId);
    // If you're deleting from a database or an API, you would have code here to do so
    }
}