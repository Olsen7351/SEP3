<h3>BacklogCreation</h3>

@page "/create-backlog/{ProjectIdAsString}"
@using ProjectMicroservice.Models
@using Broker.Services
@using Task = System.Threading.Tasks.Task
@inject BacklogService BacklogService

<h2>Create Backlog for Project ID: @ProjectId</h2>z


<div class="container">
    <div class="card">
        <!-- Backlog Creation Form -->
        <h3>Backlog Creation</h3>
        <EditForm Model="newBacklog" OnValidSubmit="CreateBacklog">
            <div class="form-group">
                <label for="description">Description:</label>
                <InputTextArea id="description" class="form-control" @bind-Value="newBacklog.Description"></InputTextArea>
            </div>

            <button type="submit" class="button">Create</button>
        </EditForm>
    </div>
</div>

@if (createdBacklog != null)
{
    <div class="container-fluid">
        <div class="card">
            <h3 style="color: lime;">Created Backlog Successfully!</h3>
            <p>
                <strong>Description:</strong> @createdBacklog.Description
            </p>
        </div>
    </div>
}



@code {
    private Backlog newBacklog = new Backlog("");
    private Backlog createdBacklog;
    [Parameter]
    public string ProjectIdAsString { get; set; }
    public int ProjectId { get; private set; }

    private async void CreateBacklog()
    {
        createdBacklog = newBacklog; // Display the created backlog
        newBacklog = new Backlog(""); // Clear the form
        // Assume you have a BacklogService to handle backlog creation
        await BacklogService.CreateAsync(newBacklog);
    }
    
    
    
    // Called whenever parameters are set
    protected override void OnParametersSet()
    {
        if (int.TryParse(ProjectIdAsString, out var parsedId))
        {
            ProjectId = parsedId;
        }
        else
        {
    // Handle the invalid format or consider redirecting to an error page
    // For instance:
    // throw new ArgumentException("Invalid Project ID format.");
        }
    }
}






























